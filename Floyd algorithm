#include <stdio.h>

#define V 5
#define INF 100000000

void floydWarshall(int dist[V][V]) {
    for (int k = 0; k < V; k++) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (dist[i][k] != INF && dist[k][j] != INF)
                    if (dist[i][j] > dist[i][k] + dist[k][j])
                        dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
}

void printSolution(int dist[V][V]) {
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF)
                printf("INF ");
            else
                printf("%3d ", dist[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int dist[V][V] = {
        {0,   4,   INF, 5,   INF},
        {INF, 0,   1,   INF, 6},
        {2,   INF, 0,   3,   INF},
        {INF, INF, 1,   0,   2},
        {1,   INF, INF, 4,   0}
    };

    floydWarshall(dist);

    printf("Shortest distances between every pair of vertices:\n");
    printSolution(dist);

    return 0;
}
